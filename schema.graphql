# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Atoken {
  id: String!
}

type EthereumBlockModel {
  number: Float!
  timestamp: Float!
}

type EthereumTransactionModel {
  data: String
  from: String!
  gas: String
  to: String!
  value: String
}

type EthereumTransactionModelExtended {
  tx: EthereumTransactionModel!
  txType: String!
}

type InterestRatesModel {
  blockNumber: Float!
  liquidityRate: String!
  stableBorrowRate: String!
  timestamp: Float!
  variableBorrowRate: String!
}

type InterestRatesUpdatesModel {
  reserve: String!
  symbol: String!
  updates: [InterestRatesModel!]!
}

type LiquidationModel {
  principalBorrows: String!
  reserve: LiquidationReserveModel!
  user: UserLiquidationModel!
}

type LiquidationReserveModel {
  decimals: Float!
  id: String!
  symbol: String!
}

type Mutation {
  borrow(data: BorrowInput!): [EthereumTransactionModelExtended!]!
  deposit(data: TransferFromInput!): [EthereumTransactionModelExtended!]!
  liquidationCall(data: LiquidationCallInput!): [EthereumTransactionModelExtended!]!
  mint(data: MintInput!): [EthereumTransactionModelExtended!]!
  redeem(data: RedeemInput!): [EthereumTransactionModelExtended!]!
  repay(data: TransferFromInput!): [EthereumTransactionModelExtended!]!
  setUsageAsCollateral(data: SetUsageAsCollateralInput!): [EthereumTransactionModelExtended!]!
  swapBorrowRateMode(data: ApproveInput!): [EthereumTransactionModelExtended!]!
}

type Query {
  balanceOf(token: String!, userAddress: String!): UserBalanceModel!
  currentEthereumBlock: EthereumBlockModel!
  ethUsdPrice: String!
  interestRatesHistory: [InterestRatesUpdatesModel!]!
  liquidation: [LiquidationModel!]!
  ping: String!
  reserves: [ReserveModel!]!
  user(userAddress: String!): UserModel!
}

type ReserveModel {
  aTokenAddress: String!
  aTokenInitialExchangeRate: String!
  address: String!
  availableLiquidity: String!
  baseLTVasCollateral: String!
  borrowingEnabled: Boolean!
  currencyType: eCurrencyType!
  decimals: Float!
  isActive: Boolean!
  lastUpdateTimestamp: Float!
  liquidityIndex: String!
  liquidityRate: String!
  name: String!
  priceInEth: String!
  reserveLiquidationThreshold: String!
  stableBorrowRate: String!
  stableBorrowRateEnabled: Boolean!
  symbol: String!
  totalBorrows: String!
  totalBorrowsStable: String!
  totalBorrowsVariable: String!
  totalLiquidity: String!
  uiColor: String!
  usageAsCollateralEnabled: Boolean!
  utilizationRate: String!
  variableBorrowIndex: String!
  variableBorrowRate: String!
}

type Subscription {
  incomingBlockUpdate: EthereumBlockModel!
  interestRatesHistoryUpdate: InterestRatesUpdatesModel!
  reservesUpdate: ReserveModel!
  userPositionUpdate(userAddress: String!): UserModel!
}

type UserBalanceModel {
  balance: String!
  token: String!
  userAddress: String!
}

type UserLiquidationModel {
  availableBorrowsETH: String!
  currentLiquidationThreshold: String!
  currentLoanToValue: String!
  healthFactor: String!
  id: String!
  maxAmountToWithdrawInEth: String!
  reservesData: [UserLiquidationReservesModel!]!
  totalBorrowsETH: String!
  totalBorrowsUSD: String!
  totalBorrowsWithFeesETH: String!
  totalBorrowsWithFeesUSD: String!
  totalCollateralETH: String!
  totalCollateralUSD: String!
  totalFeesETH: String!
  totalFeesUSD: String!
  totalLiquidityETH: String!
  totalLiquidityUSD: String!
}

type UserLiquidationReserveModel {
  aToken: Atoken!
  decimals: Float!
  id: String!
  lastUpdateTimestamp: Float!
  liquidityRate: String!
  name: String!
  symbol: String!
  usageAsCollateralEnabled: Boolean!
}

type UserLiquidationReservesModel {
  borrowRate: String!
  borrowRateMode: String!
  interestRedirectionAddress: String!
  lastUpdateTimestamp: Float!
  originationFee: String!
  principalATokenBalance: String!
  principalBorrows: String!
  redirectedBalance: String!
  reserve: UserLiquidationReserveModel!
  usageAsCollateralEnabledOnUser: Boolean!
  userBalanceIndex: String!
  variableBorrowIndex: String!
}

type UserModel {
  reservesData: [UserReserveModel!]!
  userAddress: String!
}

type UserReserveModel {
  aTokenAddress: String!
  address: String!
  borrowRate: String!
  borrowRateMode: String!
  currentATokenBalance: String!
  currentPrincipalDeposits: String!
  decimals: Float!
  lastUpdatedTimestamp: Float!
  liquidityRate: String!
  name: String!
  originationFee: String!
  principalBorrows: String!
  symbol: String!
  uiColor: String!
  usageAsCollateralEnabledOnUser: Boolean!
  variableBorrowIndex: String!
}

type UserWithOneReserveModel {
  reserveData: UserReserveModel!
  userAddress: String!
}

"InterestRate options"
enum InterestRate {
  None
  Stable
  Variable
}

"CurrencyType options"
enum eCurrencyType {
  Other
  StableCurrency
}

input ApproveInput {
  reserve: String!
  userAddress: String!
}

input BorrowInput {
  amount: String!
  interestRateMode: InterestRate!
  onBehalfOf: String
  referralCode: String
  reserve: String!
  userAddress: String!
}

input LiquidationCallInput {
  collateralReserve: String!
  getAToken: Boolean
  liquidatedUser: String!
  purchaseAmount: String!
  reserve: String!
  userAddress: String!
}

input MintInput {
  reserve: String!
  userAddress: String!
}

input RedeemInput {
  aToken: String!
  amount: String!
  userAddress: String!
}

input SetUsageAsCollateralInput {
  reserve: String!
  usageAsCollateral: Boolean!
  userAddress: String!
}

input TransferFromInput {
  amount: String!
  onBehalfOf: String
  referralCode: String
  reserve: String!
  userAddress: String!
}
